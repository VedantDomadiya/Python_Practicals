# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K0ow4Ebj7wHsUi328QGWhYvzUEUpHkcY?usp=sharing
"""

#Pandas
#DataFrame: A Data frame is a two-dimensional data structure, i.e., data is aligned in a tabular fashion in rows and columns. Pandas DataFrame consists of three principal components,
#the data, rows, and columns.
#  There are many ways to create series type object.
#1. Using Series ( )-
import pandas as pd
ob=pd.Series()
print(ob)
ob1=pd.Series(range(5))
print(ob1)
obj2=pd.Series([2,3,4,6,88])
print(obj2)

#Creation of Series with Dictionary
import pandas as pd
ob=pd.Series({'Jan':31,'Feb':29,'March':31,'April':30})
print(ob)

# Creation of Series with scalar value
a=pd.Series(10,index=range(0,3))
print(a)
#b=pd.Series(12,index=range(1,6,2))
#b
c=pd.Series("Welcome",index=['Hema','Rahul','Anup'])
print(c)

#Creation of Series Objects –Additional functionality
#1. When it is needed to create a series with missing values, this
#can be achieved by filling missing data with a NaN (“Not a Number”) value.
import pandas as pd
import numpy as np
ob=pd.Series([6,np.NaN,7])
print(ob)
ob1=pd.Series(range(1,10,2),index=[x for x in "gfksg"])
##ob1=pd.Series(range(1,10,2),index=range(0,5))
ob1

#Dtype can also be passed with Data and index
import pandas as pd
import numpy as np
arr=[1,2,3,5]
ob=pd.Series(arr,index=['h','i','j','k'],dtype=np.float64)
ob

import pandas as pd
import numpy as np
a=np.arange(9,13)

ob=pd.Series(index=a,data=a*2,dtype=int)
print(ob)

import pandas as pd
import numpy as np
a=np.arange(9,13)

ob1=pd.Series(index=a,data=a**2)
ob1

#Series Object Attributes
#Some common attributes- <series object>.<AttributeName>
#Attribute        Description
#Series.index      Returns index of the series
#Series.values     Returns ndarray
#Series.dtype      Returns dtype object of the underlying data
#Series.shape      Returns tuple of the shape of underlying data
#Series.nbytes     Return number of bytes of underlying data
#Series.ndim       Returns the number of dimention
#Series.size       Returns number of elements
#Series.intemsize  Returns the size of the dtype
#Series.hasnans    Returns true if there are any NaN
#Series.empty      Returns true if series object is empty
import pandas as pd
s=pd.Series(range(1,15,3),index=[x for x in 'abcde'])
s
print("index",s.index)
print("values",s.values)
print("Shape",s.shape)
print("Size",s.size)
print("bytes",s.nbytes)
print("Dim",s.ndim)
print("Nan",s.hasnans)
print("empty",s.empty)
#s.itemsize

#Accessing Series Object
import pandas as pd
import numpy as np
a=np.arange(9,13)
ob=pd.Series(index=a,data=a**2)
ob
#ob[10]
print(ob[2:4])

print(ob[0::2])
print(ob[::-1])

#Element Modification <series object>[index] = <new_data_value>
import pandas as pd
s=pd.Series(range(1,15,3),index=[x for x in 'abcde' ])
s
s['c']=17
s
s[2:4]=100
s
s[1:5:2]=200
s

#head() and tail () Function
#1. head(<n> ) function fetch first n rows from a pandas object. If
#you do not provide any value for n, will return first 5 rows.
#2. tail(<n> ) function fetch last n rows from a pandas object. If
#you do not provide any value for n, will return last 5 rows.
import pandas as pd
import numpy as np
import math
s=pd.Series(data=[math.sqrt(x) for x in range(1,10)],index=[x for x in range(1,10)])
s
#s.head(6)
#s.tail(7)
#s.head()
#print(s.tail())
#(s+2)
#s*3
#s**2
#s<2
#s[s<2]
print(s[s==2])
s.drop(3)
s

import pandas as pd

data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}

#load data into a DataFrame object:
df = pd.DataFrame(data)

print(df)

import pandas as pd

data = {1:
   [420, 380, 390], 2:[3,5,7],3:[4,8,9]}

#load data into a DataFrame object:
df = pd.DataFrame(data)

print(df)

import pandas as pd

# Creating a list
author = ['Jitender', 'Purnima',
          'Arpit', 'Jyoti']
# Creating a Series by passing list
# variable to Series() function
auth_series = pd.Series(author)
# Printing Series
print(auth_series)
print(type(auth_series))

#Data Alignment
import pandas as pd
s1 = pd.Series([8,4,2,1], index=[5,3,4,2])
s2 = pd.Series([15,12,10,11],index=[1,2,4,5])
print(s1)
print(s2)
a,b = s1.align(s2)
print("Output for align method")
print(a)
print(b)

import pandas as pd
s1 = pd.Series([8,4,2,1], index=[5,3,4,2])
s2 = pd.Series([15,12,10,11],index=[1,2,4,5])
print(s1)
print(s2)
a,b = s1.align(s2, join='right')
print("Output of align method with join parameter.")
print(a)
print(b)

#from pandas.core.indexers.utils import DataFrame
#Aggregation
help(pd.DataFrame.aggregate)

#Summarization

#Computation and Analysis

#Staistical Data Analysis

import pandas as pd
dict1={"Name":['Joy', 'John', 'Jeny', 'Joy'],
       "Python":[33, 31, 19, 24],
       "DAA":[31, 22, 27, 29]
      }
df=pd.DataFrame(dict1)
df.iloc[:3,:2]

#convert DataFrame into .csv File
df.to_csv('Try.csv')

#convert DataFrame into .csv File without Index
df.to_csv('Try1.csv',index=False)

df.head(2)

df.tail(2)

df.describe()

Train_info=pd.read_csv('Train.csv')

Train_info

Train_info['Speed']

Train_info['Speed'][0]=75

Train_info

Train_info.to_csv('Train_info')

Train_info.index=['I','II','III','IV','V','VI','VII','VIII','IX']

Train_info

import numpy as np
ser=pd.Series(np.random.rand(34))
ser
type(ser)

newDF=pd.DataFrame(np.random.rand(334,5),index=np.arange(334))
print(type(newDF))
newDF

newDF.describe()

newDF.dtypes

newDF[0][0]="ABC"
newDF.dtypes

newDF.index

newDF.columns

newDF.T

newDF.head()

newDF.sort_index(axis=0,ascending=True)

newDF.sort_index(axis=1,ascending=False)



import numpy as np
import pandas as pd
dates = pd.to_datetime("27th of June, 2020")
i = dates + pd.to_timedelta(np.arange(5), unit='D')
d = [50,53,25,70,60]
time_series = pd.Series(data=d,index=i)
print(time_series)

import array as arr
import numpy as np

arr = np.array([1,2,3])
a=arr.transpose
print(a)

